{"version":3,"sources":["ng://select-autocomplete/lib/select-autocomplete.service.ts","ng://select-autocomplete/lib/select-autocomplete.component.ts","ng://select-autocomplete/lib/select-autocomplete.module.ts"],"names":["SelectAutocompleteService","Injectable","args","providedIn","SelectAutocompleteComponent","FormControl","EventEmitter","val","_this","this","checked","filteredOptions","forEach","option","selectedValue","includes","value","concat","filteredValues_1","getFilteredOptionsValues","filter","item","selectionChange","emit","prototype","ngOnChanges","options","selectedOptions","formControl","toggleDropdown","selectElem","toggle","filterItem","display","toLowerCase","indexOf","selectAllChecked","hideOption","filteredValues","push","onDisplayString","displayString","length","displayOption","multiple","i","this_1","labelCount","slice","onSelectionChange","count","Component","selector","template","Input","Output","ViewChild","SelectAutocompleteModule","NgModule","imports","BrowserAnimationsModule","MatFormFieldModule","MatSelectModule","FormsModule","ReactiveFormsModule","MatIconModule","MatCheckboxModule","MatButtonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SelectAutocompleteService {\n\n  constructor() { }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'mat-select-autocomplete',\n  template: `\n  <mat-form-field appearance=\"{{appearance}}\">\n    <mat-select #selectElem [disabled]=\"disabled\" [placeholder]=\"placeholder\" [formControl]=\"formControl\" [multiple]=\"multiple\"\n    [(ngModel)]=\"selectedValue\" (selectionChange)=\"onSelectionChange($event)\">\n    <div class=\"box-search\">\n        <mat-checkbox *ngIf=\"multiple\" color=\"primary\" class=\"box-select-all\" [(ngModel)]=\"selectAllChecked\"\n        (change)=\"toggleSelectAll($event)\"></mat-checkbox>\n        <input #searchInput type=\"text\" [ngClass]=\"{'pl-1': !multiple}\" (input)=\"filterItem(searchInput.value)\"  placeholder=\"Search...\">\n        <div class=\"box-search-icon\" (click)=\"filterItem(''); searchInput.value = ''\">\n          <button mat-icon-button class=\"search-button\">\n            <mat-icon class=\"mat-24\" aria-label=\"Search icon\">clear</mat-icon>\n          </button>\n        </div>\n      </div>\n      <mat-select-trigger>\n        {{onDisplayString()}}\n      </mat-select-trigger>\n        <mat-option *ngFor=\"let option of options\" [disabled]=\"option.disabled\" [value]=\"option[value]\"\n          [style.display]=\"hideOption(option) ? 'none': 'flex'\">{{option[display]}}\n        </mat-option>\n    </mat-select>\n    <mat-hint style=\"color:red\" *ngIf=\"showErrorMsg\">{{errorMsg}}</mat-hint>\n  </mat-form-field>\n  `,\n  styles: [\n    `\n    .box-search {\n      margin: 8px;\n      border-radius: 2px;\n      box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.16), 0 0 0 1px rgba(0, 0, 0, 0.08);\n      transition: box-shadow 200ms cubic-bezier(0.4, 0, 0.2, 1);\n      display: flex;\n    }\n    .box-search input {\n      flex: 1;\n      border: none;\n      outline: none;\n    }\n    .box-select-all {\n      width: 36px;\n      line-height: 33px;\n      color: #808080;\n      text-align: center;\n    }\n    .search-button {\n      width: 36px;\n      height: 36px;\n      line-height: 33px;\n      color: #808080;\n    }\n    .pl-1 {\n      padding-left: 1rem;\n    }`\n  ]\n})\nexport class SelectAutocompleteComponent implements OnChanges {\n\n  @Input()\n  placeholder;\n  @Input()\n  options;\n  @Input()\n  disabled = false;\n  @Input()\n  display;\n  @Input()\n  value;\n  @Input()\n  formControl = new FormControl();\n  @Input()\n  errorMsg = '';\n  @Input()\n  showErrorMsg = false;\n  @Input()\n  selectedOptions;\n  @Input()\n  multiple = true;\n\n  // New Options\n  @Input()\n  labelCount = 1;\n  @Input()\n  appearance = 'standard';\n\n  @Output()\n  selectionChange: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild('selectElem') selectElem;\n\n  filteredOptions: Array<any> = [];\n  selectedValue: Array<any> = [];\n  selectAllChecked = false;\n  displayString = '';\n  constructor() { }\n\n  ngOnChanges() {\n    this.filteredOptions = this.options;\n    if (this.selectedOptions) {\n      this.selectedValue = this.selectedOptions;\n    } else if (this.formControl.value) {\n      this.selectedValue = this.formControl.value;\n    }\n  }\n\n  toggleDropdown() {\n    this.selectElem.toggle();\n  }\n\n  toggleSelectAll = function(val) {\n    if (val.checked) {\n      this.filteredOptions.forEach(option => {\n        if (!this.selectedValue.includes(option[this.value])) {\n          this.selectedValue = this.selectedValue.concat([option[this.value]]);\n        }\n      });\n    } else {\n      const filteredValues = this.getFilteredOptionsValues();\n      this.selectedValue = this.selectedValue.filter(\n        item => !filteredValues.includes(item)\n      );\n    }\n    this.selectionChange.emit(this.selectedValue);\n  };\n\n  filterItem(value) {\n    this.filteredOptions = this.options.filter(\n      item => item[this.display].toLowerCase().indexOf(value.toLowerCase()) > -1\n    );\n    this.selectAllChecked = true;\n    this.filteredOptions.forEach(item => {\n      if (!this.selectedValue.includes(item[this.value])) {\n        this.selectAllChecked = false;\n      }\n    });\n  }\n\n  hideOption(option) {\n    return !(this.filteredOptions.indexOf(option) > -1);\n  }\n\n  // Returns plain strings array of filtered values\n  getFilteredOptionsValues() {\n    const filteredValues = [];\n    this.filteredOptions.forEach(option => {\n      filteredValues.push(option.value);\n    });\n    return filteredValues;\n  }\n\n  onDisplayString() {\n    this.displayString = '';\n    if (this.selectedValue && this.selectedValue.length) {\n      let displayOption = [];\n      if (this.multiple) {\n        // Multi select display\n        for (let i = 0; i < this.labelCount; i++) {\n          displayOption[i] = this.options.filter(\n            option => option.value === this.selectedValue[i]\n          )[0];\n        }\n        if (displayOption.length) {\n          for (let i = 0; i < displayOption.length; i++) {\n            this.displayString += displayOption[i][this.display] + ',';\n          }\n          this.displayString = this.displayString.slice(0, -1);\n          if (this.selectedValue.length > 1) {\n            this.displayString += ` (+${this.selectedValue.length - this.labelCount} others)`;\n          }\n        }\n      } else {\n        // Single select display\n        displayOption = this.options.filter(\n          option => option.value === this.selectedValue\n        );\n        if (displayOption.length) {\n          this.displayString = displayOption[0][this.display];\n        }\n      }\n    }\n    return this.displayString;\n  }\n\n  onSelectionChange(val) {\n    const filteredValues = this.getFilteredOptionsValues();\n    let count = 0;\n    if (this.multiple) {\n      this.selectedValue.filter(item => {\n        if (filteredValues.includes(item)) {\n          count++;\n        }\n      });\n      this.selectAllChecked = count === this.filteredOptions.length;\n    }\n    this.selectedValue = val.value;\n    this.selectionChange.emit(this.selectedValue);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { SelectAutocompleteComponent } from './select-autocomplete.component';\n\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSelectModule} from '@angular/material/select';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule, MatCheckboxModule} from '@angular/material';\n\n@NgModule({\n  imports: [BrowserAnimationsModule, MatFormFieldModule, MatSelectModule, FormsModule, ReactiveFormsModule,\n    MatIconModule, MatCheckboxModule, MatButtonModule],\n  declarations: [SelectAutocompleteComponent],\n  exports: [SelectAutocompleteComponent]\n})\nexport class SelectAutocompleteModule { }\n"]}